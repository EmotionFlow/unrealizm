package jp.pipa.poipiku;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.naming.InitialContext;
import javax.sql.DataSource;

import jp.pipa.poipiku.util.Log;
import jp.pipa.poipiku.util.Util;

public class Emoji {
	static final int EMOJI_KEYBORD_LINE_DEFAULT = 3;
	//static final int EMOJI_KEYBORD_LINE_MAX = 6;
	static final int EMOJI_KEYBORD_PC = 14;
	//static final int EMOJI_KEYBORD_SP = 8;
	static final int EMOJI_KEYBORD_MAX = EMOJI_KEYBORD_PC*EMOJI_KEYBORD_LINE_DEFAULT;

	public static final int EMOJI_CAT_RECENT = 0;
	public static final int EMOJI_CAT_POPULAR = 1;
	public static final int EMOJI_CAT_FOOD = 2;
	public static final int EMOJI_CAT_OTHER = 3;
	public static final int EMOJI_CAT_CHEER = 4;

	public static final int EMOJI_CHEER_NUM = 16;

	private static final Emoji INSTANCE = new Emoji();
	private Emoji() {}
	public static Emoji getInstance() {
		return INSTANCE;
	}

	public String[][] EMOJI_LIST;
	public List<String> EMOJI_ALL_ARRAY;

	public void init(){
		EMOJI_ALL_ARRAY = Arrays.asList(EMOJI_ALL);

		// ‰∫∫Ê∞ó
		List<String> listPopular = new ArrayList<>();
		DataSource dataSource = null;
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		String strSql = "";
		try {
			dataSource = (DataSource)new InitialContext().lookup(Common.DB_POSTGRESQL);
			connection = dataSource.getConnection();
			strSql = "SELECT description FROM vw_rank_emoji_daily ORDER BY rank DESC LIMIT ?";
			statement = connection.prepareStatement(strSql);
			statement.setInt(1, EMOJI_KEYBORD_MAX);
			resultSet = statement.executeQuery();
			while (resultSet.next()) {
				listPopular.add(Util.toString(resultSet.getString(1)).trim());
			}
			resultSet.close();resultSet=null;
			statement.close();statement=null;
		} catch(Exception e) {
			Log.d(strSql);
			e.printStackTrace();
		} finally {
			try{if(resultSet!=null){resultSet.close();resultSet=null;}}catch(Exception e){;}
			try{if(statement!=null){statement.close();statement=null;}}catch(Exception e){;}
			try{if(connection!=null){connection.close();connection=null;}}catch(Exception e){;}
		}

		List<List<String>> list;
		list = new ArrayList<>();
		list.add(new ArrayList<>()); // 0.‰∫∫Ê∞ó
		list.add(listPopular); // 1.„Çà„Åè‰Ωø„ÅÜ
		list.add(new ArrayList<>(Arrays.asList(EMOJI_OYATSU_ALL))); // 2.„Åä„ÇÑ„Å§
		list.add(new ArrayList<>(EMOJI_ALL_ARRAY)); // 3.„Åù„ÅÆ‰ªñ
		list.add(new ArrayList<>(EMOJI_ALL_ARRAY)); // 4.„Éù„ÉÅË¢ã

		EMOJI_LIST = new String[5][];
		for (int i=0; i<list.size(); i++) {
			EMOJI_LIST[i] = (String[]) list.get(i).toArray(new String[0]);
		}
	}

	// For Event
	public static final boolean EMOJI_EVENT = false;
	//public static final String EMOJI_EVENT_CHAR = "üíù";		// X'mas
	public static final String EMOJI_EVENT_CHAR = "üéÉ";	//Halloween
	public static final String[] EMOJI_EVENT_LIST = {
			EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,
			EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,
			EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,
			EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,EMOJI_EVENT_CHAR,
	};

	// ÁµµÊñáÂ≠ó
	public static final String[] EMOJI_ALL = {
			// Unicode Version 6.1 https://emojipedia.org/unicode-6.1/
			"üòÄ", "üòó", "üòô",
			// Unicode Version 6.0 https://emojipedia.org/unicode-6.0/
			"üòÅ", "üòÇ", "üòÉ", "üòÑ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "üòç", "üòò", "üòö", "üòè", "üòå", "üòú", "üòù", "üò¢", "üò≠", "üòá", "üò∫", "üò∏", "üòπ",
			"üòª", "üòº", "üòΩ", "üòø", "üë∂", "üë¶", "üëß", "üë®", "üë©", "üë¥", "üëµ", "üëÆ", "üíÇ", "üë∑", "üë∏", "üë≥", "üë≤", "üë±", "üë∞", "üëº", "üéÖ", "üôç",
			"üôé", "üôÜ", "üíÅ", "üôã", "üôá", "üíÜ", "üíá", "üö∂", "üèÉ", "üíÉ", "üëØ", "üõÄ", "üë•", "üèá", "üèÇ", "üèÑ", "üö£", "üèä", "üö¥", "üöµ", "üë´", "üë¨",
			"üë≠", "üíè", "üíë", "üë™", "üí™", "üëà", "üëâ", "üëÜ", "‚úã", "üëå", "üëç", "‚úä", "üëä", "üëè", "üëê", "üôå", "üôè", "üíÖ", "üëÇ", "üëÉ", "üë£", "üëÄ",
			"üëÑ", "üíã", "üíò", "üíì", "üíï", "üíñ", "üíó", "üíô", "üíö", "üíõ", "üíú", "üíù", "üíû", "üíü", "üíå", "üí´", "üëì", "üëî", "üëï", "üëñ", "üëó", "üëò",
			"üëô", "üëö", "üëõ", "üëú", "üëù", "üéí", "üëû", "üëü", "üë†", "üë°", "üë¢", "üëë", "üëí", "üé©", "üéì", "üíÑ", "üíç", "üíé", "üêµ", "üêí", "üê∂", "üêï",
			"üê©", "üê∫", "üê±", "üêà", "üêØ", "üêÖ", "üêÜ", "üê¥", "üêé", "üêÆ", "üêÇ", "üêÉ", "üêÑ", "üê∑", "üêñ", "üêó", "üêΩ", "üêè", "üêë", "üêê", "üê™", "üê´",
			"üêò", "üê≠", "üêÅ", "üêÄ", "üêπ", "üê∞", "üêá", "üêª", "üê®", "üêº", "üêæ", "üêî", "üêì", "üê£", "üê§", "üê•", "üê¶", "üêß", "üê∏", "üêä", "üê¢", "üêç",
			"üê≤", "üêâ", "üê≥", "üêã", "üê¨", "üêü", "üê†", "üê°", "üêô", "üêö", "üêû", "üíê", "üå∏", "üíÆ", "üåπ", "üå∫", "üåª", "üåº", "üå∑", "üå±", "üå≤", "üå≥",
			"üå¥", "üåµ", "üåæ", "üåø", "üçÄ", "üçÅ", "üçÇ", "üçÉ", "üçá", "üçà", "üçâ", "üçä", "üçã", "üçå", "üçç", "üçé", "üçè", "üçê", "üçë", "üçí", "üçì", "üçÖ",
			"üçÜ", "üåΩ", "üçÑ", "üå∞", "üçû", "üçñ", "üçó", "üçî", "üçü", "üçï", "üç≥", "üç≤", "üç±", "üçò", "üçô", "üçö", "üçõ", "üçú", "üçù", "üç†", "üç¢", "üç£",
			"üç§", "üç•", "üç°", "üç¶", "üçß", "üç®", "üç©", "üç™", "üéÇ", "üç∞", "üç´", "üç¨", "üç≠", "üçÆ", "üçØ", "üçº", "üçµ", "üç∂", "üç∑", "üç∏", "üçπ", "üç∫",
			"üçª", "üç¥", "üåç", "üåé", "üåè", "üåê", "üóæ", "üåã", "üóª", "üè†", "üè°", "üè¢", "üè£", "üè§", "üè•", "üè¶", "üè®", "üè©", "üè™", "üè´", "üè¨", "üè≠",
			"üèØ", "üè∞", "üíí", "üóº", "üóΩ", "üåÅ", "üåÉ", "üåÑ", "üåÖ", "üåÜ", "üåá", "üåâ", "üåå", "üé†", "üé°", "üé¢", "üíà", "üé™", "üöÇ", "üöÉ", "üöÑ", "üöÖ",
			"üöÜ", "üöá", "üöà", "üöâ", "üöä", "üöù", "üöû", "üöã", "üöå", "üöç", "üöé", "üöê", "üöë", "üöí", "üöì", "üöî", "üöï", "üöñ", "üöó", "üöò", "üöô", "üöö",
			"üöõ", "üöú", "üö≤", "üöè", "üö®", "üö•", "üö¶", "üöß", "üö§", "üö¢", "üí∫", "üöÅ", "üöü", "üö†", "üö°", "üöÄ", "‚è≥", "‚è∞", "‚è±", "‚è≤", "üïõ", "üïß",
			"üïê", "üïú", "üïë", "üïù", "üïí", "üïû", "üïì", "üïü", "üïî", "üï†", "üïï", "üï°", "üïñ", "üï¢", "üïó", "üï£", "üïò", "üï§", "üïô", "üï•", "üïö", "üï¶",
			"üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò", "üåô", "üåõ", "üåú", "üåù", "üåû", "üåü", "üå†", "üåÄ", "üåà", "üåÇ", "üåä", "üéÉ", "üéÑ", "üéÜ", "üéá",
			"‚ú®", "üéà", "üéâ", "üéä", "üéã", "üéç", "üéé", "üéè", "üéê", "üéë", "üéÄ", "üéÅ", "üé´", "üèÜ", "üèÄ", "üèà", "üèâ", "üéæ", "üé≥", "üé£", "üéΩ", "üéø",
			"üéØ", "üé±", "üîÆ", "üéÆ", "üé∞", "üé≤", "üÉè", "üé¥", "üé≠", "üé®", "üîà", "üîâ", "üîä", "üì¢", "üì£", "üìØ", "üîî", "üéº", "üéµ", "üé∂", "üé§", "üéß",
			"üìª", "üé∑", "üé∏", "üéπ", "üé∫", "üéª", "üì±", "üì≤", "üìû", "üìü", "üì†", "üîã", "üîå", "üíª", "üíΩ", "üíæ", "üíø", "üìÄ", "üé•", "üé¨", "üì∫", "üì∑",
			"üìπ", "üìº", "üîç", "üîé", "üí°", "üî¶", "üèÆ", "üìî", "üìï", "üìñ", "üìó", "üìò", "üìô", "üìö", "üìì", "üìí", "üìÉ", "üìú", "üìÑ", "üì∞", "üìë", "üîñ",
			"üí∞", "üí¥", "üíµ", "üí∂", "üí∑", "üí∏", "üí≥", "üíπ", "üí±", "üí≤", "üìß", "üì®", "üì©", "üì§", "üì•", "üì¶", "üì´", "üì™", "üì¨", "üì≠", "üìÆ", "üìù",
			"üíº", "üìÅ", "üìÇ", "üìÖ", "üìÜ", "üìá", "üìà", "üìä", "üìã", "üìå", "üìç", "üìé", "üìè", "üìê", "üîí", "üîì", "üîè", "üîê", "üîë", "üî®", "üî´", "üîß",
			"üî©", "üîó", "üî¨", "üî≠", "üì°", "üíâ", "üíä", "üö™", "üöø", "üõÅ", "üóø", "üèß", "üö∞", "üõÇ", "üõÉ", "üõÑ", "üõÖ", "üö∏", "üîÉ", "üîÑ", "üîõ", "üîú",
			"üîù", "üîØ", "‚õé", "üîÄ", "üîÅ", "üîÇ", "‚è©", "‚è≠", "‚èØ", "‚è™", "‚èÆ", "üîº", "‚è´", "üé¶", "üîÖ", "üîÜ", "üì∂", "üì≥", "üì¥", "üî±", "‚úÖ", "‚ûï",
			"üîü", "üíØ", "üî†", "üî°", "üî¢", "üî£", "üî§", "üÖ∞", "üÜé", "üÖ±", "üÜë", "üÜí", "üÜì", "üÜî", "üÜï", "üÖæ", "üÜó", "üÜô", "üàÅ", "üà∑", "üà∂", "üâê", "üàπ",
			"üà∏", "üà¥", "üà≥", "üà∫", "üàµ", "üî∂", "üî∑", "üî∏", "üîπ", "üî∫", "üí†", "üîò", "üî¥", "üîµ", "üèÅ", "üö©", "üéå", "üá±", "üá¥", "üáª", "üá™",
			// Unicode Version 5.2 https://emojipedia.org/unicode-5.2/
			"‚õ∑", "‚õπ", "‚õë", "‚õ∞", "‚õ™", "‚õ©", "‚õ≤", "‚õ∫", "‚õΩ", "‚õµ", "‚õ¥", "‚õÖ", "‚õ±", "‚õÑ", "‚öΩ", "‚öæ", "‚õ≥", "‚õ∏", "‚õì", "‚≠ï", "üÖø", "üàØ",
			// Unicode Version 5.1 https://emojipedia.org/unicode-5.1/
			"‚≠ê", "üÄÑ",
			// Unicode Version 5.0 https://emojipedia.org/unicode-5.0/

			// Unicode Version 4.1 https://emojipedia.org/unicode-4.1/
			"‚òò", "‚öì", "‚öí", "‚öî", "‚öô", "‚öñ", "‚öó", "‚ö∞", "‚ö±", "‚öõ", "‚ôæ", "‚öï", "‚öú",
			// Unicode Version 4.0 https://emojipedia.org/unicode-4.0/
			"‚òï", "‚¨Ü", "‚¨Ö", "‚èè",
			// Unicode Version 3.2 https://emojipedia.org/unicode-3.2/
			"‚§¥",
			// Unicode Version 3.0 https://emojipedia.org/unicode-3.0/
			"‚Ñπ",
			// Unicode Version 1.1 https://emojipedia.org/unicode-1.1/
			"‚ò∫", "‚òù", "‚úå", "‚úç", "‚ù§", "‚ù£", "‚ô®", "‚úà", "‚åõ", "‚åö", "‚òÄ", "‚ùÑ", "‚òÉ", "‚òÑ", "‚ô†", "‚ô•", "‚ô¶", "‚ô£", "‚ôü", "‚òé", "‚å®", "‚úâ", "‚úè", "‚úí", "‚Üó", "‚û°", "‚Üñ",
			"‚Üï", "‚Üî", "‚Ü©", "‚Ü™", "‚ú°", "‚ò∏", "‚òØ", "‚úù", "‚ò¶", "‚ò™", "‚òÆ", "‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", "‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì", "‚ñ∂", "‚óÄ", "‚ôÄ", "‚ôÇ", "‚ú≥", "‚ùá",
			"‚Äº", "¬©", "¬Æ", "‚Ñ¢", "‚ìÇ", "„äó", "„äô",
	};

	public static final String[] EMOJI_OYATSU_ALL = {
			"‚òï", "üçµ", "üçº", "üç°", "üç≠", "üç¨", "üç©", "üç™", "üç´", "üçÆ", "üç∞", "üéÇ", "üç¶", "üçß", "üç®", "üçØ", "üç¢", "üçñ",
			"üçô", "üç•","üçó", "üçî", "üçü", "üçï", "üç≥", "üç≤", "üç±", "üçò", "üçö", "üçû", "üçõ", "üçú", "üçù", "üç†", "üç£", "üç§",
			"üç∂", "üç∑", "üç∏", "üçπ", "üç∫", "üçª", "üçÑ", "üå∞", "üçá", "üçà", "üçâ", "üçä", "üçã", "üçå", "üçç", "üçé", "üçè", "üçê",
			"üçë", "üçí", "üçì", "üçÖ", "üçÜ", "üåΩ", "üíä",
	};


	public static final String[][] __EMOJI_LIST = {
			// ‰∫∫Ê∞ó
			{},
			// „Çà„Åè‰Ωø„ÅÜ
			{},
			/*
			// ‰Ωø„ÅÑ„Åæ„Çè„Åó„Éê„É¨„É≥„Çø„Ç§„É≥
			{
				"üá±", "üá¥", "üáª", "üá™", "‚ù§", "‚ù£", "‚ô•", "üíí", "üè©", "üíè", "üíë", "üòç", "üòª", "üíû", "üíü", "üíå", "üíò", "üíì", "üíï", "üíñ", "üíó", "üíô", "üíö", "üíõ", "üíú", "üíù",
			},
			*/
			/*
			// ‰Ωø„ÅÑ„Åæ„Çè„ÅóÂπ¥Ë≥ÄÁä∂
			{
				"üê≠", "üêÆ", "üêØ", "üê∞", "üê≤", "üêç", "üêé", "üêë", "üêµ", "üêî", "üê∂", "üêó", "üí¥", "üí∞", "üëõ", "üç±", "üóª", "üçÜ", "üéç", "üåÑ", "‚õ©", "üôè", "üçä",
			},
			*/
			/*
			// x'mas
			{
				"üéÖ", "üéÑ", "üéÅ", "üíù", "üç∞", "üéâ", "üéÄ", "‚õÑ", "‚ùÑ", "üåü",
			},
			*/
			/*
			// „Ç∑„Çß„Ç¢„Éè„Éî(„Éù„ÉÉ„Ç≠„Éº„ÅÆÊó•)
			{
				"üçì", "üçÄ", "üíê", "üòö", "üë´", "üë¨", "üë≠", "üçº", "üíû",
			},
			*/
			/*
			// „ÅäËèìÂ≠ê(„Éè„É≠„Ç¶„Ç£„É≥Áî®)
			{
				"üçº", "üç≠", "üç¨", "üç©", "üç™", "üç´", "üçÆ", "üç∞", "üç¶", "üçß",  "üç†", "üç∑",
				"üç∏", "üçπ", "üç∫", "üçª", "üçÑ", "üçá", "üçå", "üçé", "üçè", "üçë", "üçí", "üçì",
			},
			*/
			// „Åä„ÇÑ„Å§
			{},
			/*
			// Ê§çÁâ©
			{
				"üíê", "üå∏", "üíÆ", "üåπ", "üå∫", "üåª", "üåº", "üå∑", "üå±", "üå≤", "üå≥", "üå¥", "üåµ", "üåæ", "üåø", "‚òò", "üçÄ", "üçÅ",
				"üçÇ", "üçÉ",
			},
			// emotion
			{
				"üí™", "üôè", "üë£", "üëÄ", "üëÖ", "üëÑ", "üíã", "‚ù§", "‚ù£", "üíò", "üíì", "üíî", "üíï", "üíñ", "üíó", "üíô", "üíö", "üíõ",
				"üíú", "üíù", "üíû", "üíü", "üíå", "üí§", "üí®", "üí´", "‚≠ê",
			},
			*/
			// „Åù„ÅÆ‰ªñ
			{},
			// „Éù„ÉÅË¢ã
			{}
	};

	//private static String[] FORBITTED_EMOJI = {"üëé"};

	public static ArrayList<String> getDefaultEmoji(int nUserId) {
		ArrayList<String> vResult = new ArrayList<String>();

		if(EMOJI_EVENT) {	// „Ç§„Éô„É≥„ÉàÁî®
			for(String emoji : EMOJI_EVENT_LIST) {
				vResult.add(emoji);
			}
		} else {	// ÈÄöÂ∏∏ÊôÇ
			DataSource dataSource = null;
			Connection connection = null;
			PreparedStatement statement = null;
			ResultSet resultSet = null;
			String strSql = "";
			try {
				dataSource = (DataSource)new InitialContext().lookup(Common.DB_POSTGRESQL);
				connection = dataSource.getConnection();

				if(nUserId>0) {
					strSql = "SELECT description FROM vw_comments_0000_last_7days WHERE user_id=? GROUP BY description ORDER BY count(description) DESC LIMIT ?";
					statement = connection.prepareStatement(strSql);
					statement.setInt(1, nUserId);
					statement.setInt(2, EMOJI_KEYBORD_MAX);
					resultSet = statement.executeQuery();
					while (resultSet.next()) {
						vResult.add(Util.toString(resultSet.getString(1)).trim());
					}
					resultSet.close();resultSet=null;
					statement.close();statement=null;
					if(vResult.size()>0 && vResult.size()<EMOJI_KEYBORD_MAX){
						strSql = "SELECT description FROM vw_rank_emoji_daily WHERE description NOT IN(SELECT description FROM vw_comments_0000_last_7days WHERE user_id=?) ORDER BY rank DESC LIMIT ?";
						statement = connection.prepareStatement(strSql);
						statement.setInt(1, nUserId);
						statement.setInt(2, EMOJI_KEYBORD_MAX-vResult.size());
						resultSet = statement.executeQuery();
						while (resultSet.next()) {
							vResult.add(Util.toString(resultSet.getString(1)).trim());
						}
						resultSet.close();resultSet=null;
						statement.close();statement=null;
					}
				}
				if(vResult.size()<EMOJI_KEYBORD_MAX){
					strSql = "SELECT description FROM vw_rank_emoji_daily ORDER BY rank DESC LIMIT ?";
					statement = connection.prepareStatement(strSql);
					statement.setInt(1, EMOJI_KEYBORD_MAX-vResult.size());
					resultSet = statement.executeQuery();
					while (resultSet.next()) {
						vResult.add(Util.toString(resultSet.getString(1)).trim());
					}
					resultSet.close();resultSet=null;
					statement.close();statement=null;
				}

				/*
				// vw_user_emoji_minute„Éê„Éº„Ç∏„Éß„É≥
				if(nUserId>0) {
					strSql = "SELECT description FROM vw_user_emoji_minute WHERE user_id=? ORDER BY description_count DESC LIMIT ?";
					statement = connection.prepareStatement(strSql);
					statement.setInt(1, nUserId);
					statement.setInt(2, EMOJI_KEYBORD_MAX);
					resultSet = statement.executeQuery();
					while (resultSet.next()) {
						vResult.add(Util.toString(resultSet.getString(1)).trim());
					}
					resultSet.close();resultSet=null;
					statement.close();statement=null;
					if(vResult.size()>0 && vResult.size()<EMOJI_KEYBORD_MAX){
						strSql = "SELECT description FROM vw_rank_emoji_daily WHERE description NOT IN("+strSql+") ORDER BY rank DESC LIMIT ?";
						statement = connection.prepareStatement(strSql);
						statement.setInt(1, nUserId);
						statement.setInt(2, EMOJI_KEYBORD_MAX);
						statement.setInt(3, EMOJI_KEYBORD_MAX-vResult.size());
						resultSet = statement.executeQuery();
						while (resultSet.next()) {
							vResult.add(Util.toString(resultSet.getString(1)).trim());
						}
						resultSet.close();resultSet=null;
						statement.close();statement=null;
					}
				}
				if(vResult.size()<EMOJI_KEYBORD_MAX){
					strSql = "SELECT description FROM vw_rank_emoji_daily ORDER BY rank DESC LIMIT ?";
					statement = connection.prepareStatement(strSql);
					statement.setInt(1, EMOJI_KEYBORD_MAX-vResult.size());
					resultSet = statement.executeQuery();
					while (resultSet.next()) {
						vResult.add(Util.toString(resultSet.getString(1)).trim());
					}
					resultSet.close();resultSet=null;
					statement.close();statement=null;
				}
				*/
			} catch(Exception e) {
				Log.d(strSql);
				e.printStackTrace();
			} finally {
				try{if(resultSet!=null){resultSet.close();resultSet=null;}}catch(Exception e){;}
				try{if(statement!=null){statement.close();statement=null;}}catch(Exception e){;}
				try{if(connection!=null){connection.close();connection=null;}}catch(Exception e){;}
			}
		}
		return vResult;
	}
}
